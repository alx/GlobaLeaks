(dp1
S'output'
p2
S''
sS'layer'
p3
S'/Users/hellais/Documents/code/mygit/globaleaks/webapp/applications/init/controllers/default.py'
p4
sS'code'
p5
S'# -*- coding: utf-8 -*-\n### required - do no delete\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call():\n    session.forget()\n    return service()\n### end requires\ndef index():\n    return dict(message=T("Hello World, I am GlobaLeaks!"))\n\ndef submission():\n    form_content = (Field(\'Title\', requires=IS_NOT_EMPTY()),\n                    Field(\'Description\', \'text\', requires=IS_NOT_EMPTY()),\n                    Field(\'Tags\'),Field(\'material\', \'upload\', uploadfolder="uploads/"),\n                    Field(\'dislaimer\', \'boolean\', requires=IS_EQUAL_TO("on", error_message="Please read the disclaimer")))\n   \n    form = SQLFORM.factory(*form_content)\n    \n    if form.accepts(request.vars, session):\n        l = request.vars\n        leak_id = gl.create_leak(l.Title, l.Description, None, None,\n                {"Al Jazeera":10 , "CNN":20, "Leaker":0}, l.Tags)\n        \n        #response.flash = \'form accepted\'\n        leak = Leak(leak_id)\n\n        #FIXME do this better...\n        tulips = []\n        for tulip in leak.tulips:\n            if tulip.target=="Leaker":\n                leaker_tulip = tulip.url\n            else:\n                tulips.append((tulip.url, tulip.target))\n            \n        return dict(leak_id=leak_id, tulip=tulip.url, form=None, tulips=tulips)\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'        \n    \n    return dict(form=form, leak_id=None, tulip=None, tulips=None)\n\ndef tulip():\n    tulip_url = request.args[0]\n    t = Tulip(url=tulip_url)\n    leak = t.get_leak()\n    t.downloads_counter = int(t.downloads_counter) + 1\n    print t.downloads_counter\n    return dict(leak_title=leak.title,\n                leak_tags=leak.tags,\n                leak_desc=leak.desc,\n                leak_material=leak.material,\n                tulip_downloads=t.downloads_counter,\n                tulip_allowed_downloads=t.allowed_downloads)\n\ndef error():\n    return dict()\n\nresponse._vars=response._caller(tulip)\n'
p6
sS'snapshot'
p7
(dp8
sS'traceback'
p9
S'Traceback (most recent call last):\n  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/gluon/restricted.py", line 192, in restricted\n    exec ccode in environment\n  File "/Users/hellais/Documents/code/mygit/globaleaks/webapp/applications/init/controllers/default.py", line 60, in <module>\n  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/gluon/globals.py", line 145, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/hellais/Documents/code/mygit/globaleaks/webapp/applications/init/controllers/default.py", line 48, in tulip\n    t.downloads_counter = int(t.downloads_counter) + 1\n  File "/Users/hellais/Documents/code/mygit/globaleaks/webapp/applications/init/models/datamodel.py", line 118, in set_downloads_counter\n    db.tulip.commit()\n  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/gluon/dal.py", line 4731, in __getattr__\n    return self[key]\n  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/gluon/dal.py", line 4675, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'commit\'\n'
p10
s.